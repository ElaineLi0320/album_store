/*
 * Album Store API
 *
 * CS6650 Fall 2023
 *
 * API version: 1.0.0
 * Contact: i.gorton@northeasern.edu
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"github.com/gorilla/mux"
	"net/http"
)

// Static responses
var getResponse = AlbumInfo{
	Year:   "1997",
	Artist: "Sex Pistols",
	Title:  "Never Mind The Bollocks!",
}

var postResponse = ImageMetaData{
	AlbumID:   "123",
	ImageSize: "1024",
}

// GetAlbumByKey handler
func GetAlbumByKey(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	albumID := vars["albumID"]

	if albumID == "" {
		http.Error(w, `{"error": "Album ID is required."}`, http.StatusBadRequest)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(getResponse)
}

// NewAlbum handler
func NewAlbum(w http.ResponseWriter, r *http.Request) {
	// Parse form data
	err := r.ParseMultipartForm(1 * 1024 * 1024) // 1MB max size
	if err != nil {
		http.Error(w, `{"error": "Unable to parse form data."}`, http.StatusBadRequest)
		return
	}

	//Get the "image" part
	imageFile, _, err := r.FormFile("image")
	if err != nil || imageFile == nil {
		http.Error(w, `{"error": "Image file is required."}`, http.StatusBadRequest)
		return
	}
	defer imageFile.Close()
	profile := r.FormValue("profile")
	if profile == "" {
		http.Error(w, `{"error": "Profile information is required."}`, http.StatusBadRequest)
		return
	}

	var albumInfo AlbumInfo
	profileErr := json.Unmarshal([]byte(profile), &albumInfo)
	if profileErr != nil {
		http.Error(w, `{"error": "Invalid JSON format in profile."}`, http.StatusBadRequest)
		return
	}
	// Validate required fields
	if albumInfo.Artist == "" || albumInfo.Title == "" || albumInfo.Year == "" {
		http.Error(w, `{"error": "All fields (artist, title, year) are required."}`, http.StatusBadRequest)
		return
	}

	// Respond with static data
	w.WriteHeader(http.StatusCreated)
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(postResponse)
}
